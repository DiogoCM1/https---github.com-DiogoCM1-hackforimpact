{
    "files": [
        {
            "path": "/MedicineOneLibraryWS/MedicineOneLibraryWS.sln",
            "changeType": "edit",
            "added_lines": [
                "\tGlobalSection(StartupProject) = postSolution",
                "\t\tStartupProject = {1E0E82A0-7842-4E6B-A5BA-E59357C90DA8}",
                "\tEndGlobalSection"
            ]
        },
        {
            "path": "/MedicineOneLibraryWS/MedicineOneLibraryWS/M1LibraryService.asmx.cs",
            "changeType": "edit",
            "added_lines": [
                "        [WebMethod]",
                "        [SoapHeader(\"AuthenticationToken\")]",
                "        public IntegracaoResposta Stock_Armazens_Artigo_Lote_Quantidade_Sincronizar(IntegracaoPedido request)",
                "        {",
                "            AuthorizeToken();",
                "            var resultado = new IntegracaoResposta();",
                "            try",
                "            {",
                "                if (request == null || request.Artigos == null || request.Artigos.Count == 0)",
                "                {",
                "                    resultado.Success = false;",
                "                    resultado.Message = \"Parâmetros inválidos: Request ou lista de artigos é nula/vazia.\";",
                "                    Fact.WriteLogQuery(resultado.Message, \"Stock_Armazens_Artigo_Lote_Quantidade_Sincronizar_Error\");",
                "                    return resultado;",
                "                }",
                "",
                "                using (var connection = new SqlConnection(ConfigurationManager.AppSettings[\"MedicineOneConnectionString\"]))",
                "                {",
                "                    connection.Open();",
                "",
                "                    // Validar se o armazém existe",
                "                    var armazemExists = connection.QueryFirstOrDefault<int>(\"SELECT COUNT(*) FROM dbo.STK_ARMAZENS WHERE Pk = @PkArmazem\",",
                "                        new { PkArmazem = request.PkArmazem });",
                "",
                "                    if (armazemExists == 0)",
                "                    {",
                "                        resultado.Success = false;",
                "                        resultado.Message = $\"Armazém não encontrado: {request.PkArmazem}\";",
                "                        Fact.WriteLogQuery(resultado.Message, \"Stock_Armazens_Artigo_Lote_Quantidade_Sincronizar_Error\");",
                "                        return resultado;",
                "                    }",
                "",
                "                    using (var transaction = connection.BeginTransaction())",
                "                    {",
                "                        try",
                "                        {",
                "                            // Filtrar e inserir artigos válidos (não anulados) em batch",
                "                            var artigosIds = request.Artigos.Select(a => a.PkArtigo).ToList();",
                "",
                "                            // Obter todos os produtos válidos de uma só vez",
                "                            var produtosValidos = connection.Query(",
                "                                \"SELECT p.Pk, p.Nome, p.Codigo FROM dbo.STK_PRODUTOS p WHERE p.Pk IN @Ids AND p.Sys_deleted = 0\",",
                "                                new { Ids = artigosIds }, transaction: transaction)",
                "                                .ToDictionary(p => (Guid)p.Pk, p => new { Nome = (string)p.Nome, Codigo = (string)p.Codigo });",
                "",
                "                            // Filtrar apenas artigos que existem e não estão anulados",
                "                            var artigosValidos = request.Artigos",
                "                                .Where(a => produtosValidos.ContainsKey(a.PkArtigo))",
                "                                .ToList();",
                "",
                "                            // Log de artigos ignorados",
                "                            var artigosIgnorados = request.Artigos.Where(a => !produtosValidos.ContainsKey(a.PkArtigo)).ToList();",
                "                            if (artigosIgnorados.Any())",
                "                            {",
                "                                var idsIgnorados = string.Join(\", \", artigosIgnorados.Select(a => a.PkArtigo));",
                "                                Fact.WriteLogQuery($\"Artigos não encontrados ou anulados: {idsIgnorados}\", \"Stock_Armazens_Artigo_Lote_Quantidade_Sincronizar_Warning\");",
                "                            }",
                "",
                "                            if (artigosValidos.Count == 0)",
                "                            {",
                "                                resultado.Success = false;",
                "                                resultado.Message = \"Nenhum artigo válido encontrado para sincronização.\";",
                "                                return resultado;",
                "                            }",
                "",
                "                            // Inserir os artigos na tabela de sincronização Primavera",
                "                            var insertSql = @\"",
                "                                INSERT INTO dbo.STK_Sincronizacao_Primavera (PkArmazem, PkArtigo, PkLote, Quantidade, DataSincronizacao)",
                "                                VALUES (@PkArmazem, @PkArtigo, @PkLote, @Quantidade, GETDATE())\";",
                "",
                "                            var artigosComArmazem = artigosValidos.Select(a => new",
                "                            {",
                "                                PkArmazem = request.PkArmazem,",
                "                                a.PkArtigo,",
                "                                a.PkLote,",
                "                                a.Quantidade",
                "                            }).ToList();",
                "",
                "                            connection.Execute(insertSql, artigosComArmazem, transaction: transaction);",
                "",
                "                            resultado.ArtigosProcessados = artigosValidos.Count;",
                "                            resultado.Message = $\"Sincronização concluída. {artigosValidos.Count} artigos inseridos na tabela de sincronização.\";",
                "",
                "                            transaction.Commit();",
                "",
                "                            // Log de sucesso",
                "                            var logMessage = $\"Armazém: {request.PkArmazem} | Artigos processados: {artigosValidos.Count}\";",
                "                            Fact.WriteLogQuery(logMessage, \"Stock_Armazens_Artigo_Lote_Quantidade_Sincronizar\");",
                "                        }",
                "                        catch (Exception ex)",
                "                        {",
                "                            transaction.Rollback();",
                "                            throw;",
                "                        }",
                "                    }",
                "                }",
                "            }",
                "            catch (Exception ex)",
                "            {",
                "                resultado.Success = false;",
                "                resultado.Message = $\"Erro interno: {ex.Message}\";",
                "                Fact.WriteLogQuery($\"Erro geral: {ex.ToString()}\", \"Stock_Armazens_Artigo_Lote_Quantidade_Sincronizar_Error\");",
                "            }",
                "",
                "            return resultado;",
                "        }",
                "         "
            ]
        },
        {
            "path": "/MedicineOneLibraryWS/MedicineOneLibraryWS/MedicineOneLibraryWS.csproj",
            "changeType": "edit",
            "added_lines": [
                "    <Compile Include=\"Stocks\\Produtos\\ArtigoIntegracao.cs\" />"
            ]
        },
        {
            "path": "/MedicineOneLibraryWS/MedicineOneLibraryWS/Stocks/Produtos/ArtigoIntegracao.cs",
            "changeType": "add",
            "added_lines": [
                "using System;",
                "using System.Collections.Generic;",
                "",
                "namespace MedicineOneLibraryWS.Stocks.Produtos",
                "{",
                "    public class Artigo",
                "    {",
                "        public Guid PkArtigo { get; set; }",
                "        public Guid? PkLote { get; set; }",
                "        public decimal Quantidade { get; set; }",
                "    }",
                "",
                "    public class IntegracaoPedido",
                "    {",
                "        public Guid PkArmazem { get; set; }",
                "        public List<Artigo> Artigos { get; set; }",
                "    }",
                "",
                "    public class IntegracaoResposta",
                "    {",
                "        public bool Success { get; set; } = true;",
                "        public string Message { get; set; }",
                "        public int ArtigosProcessados { get; set; }",
                "        public int ArtigosComAlteracoes { get; set; }",
                "    }",
                "}"
            ]
        }
    ],
    "total": 4,
    "source_branch": "feature/diogo.carvalho/M1API-1060",
    "target_branch": "master"
}